-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/social-network#readme</a>
@package social-network
@version 0.1.0.0


-- | This module provides utility functions for handling concurrency and
--   random delays in the Haskell-Based Social Network Simulation.
module ConcurrentUtils

-- | Performs an action with a random delay.
--   
--   The delay is chosen randomly within the specified range of seconds.
--   This function is particularly useful for simulating random user
--   activities in a concurrent environment.
--   
--   <tt>param minSec Minimum delay in seconds. </tt>param maxSec Maximum
--   delay in seconds. @param action The IO action to be performed after
--   the delay.
randomDelayAction :: Int -> Int -> IO () -> IO ()

-- | Safely modifies a shared variable (MVar).
--   
--   This function ensures thread-safe modification of an MVar. It takes an
--   MVar and a function, applies the function to the MVar, and then safely
--   writes the result back to the MVar.
--   
--   <tt>param var The MVar to modify. </tt>param action The modification
--   function.
modifySharedVar :: MVar a -> (a -> IO a) -> IO ()

-- | Reads a shared variable (MVar) safely.
--   
--   This function allows for a thread-safe way to read the value of an
--   MVar without the risk of deadlocks or race conditions.
--   
--   <tt>param var The MVar to be read. </tt>return The value contained in
--   the MVar.
readSharedVar :: MVar a -> IO a


-- | Module for defining core data types used in the Haskell-Based Social
--   Network Simulation. This includes types for representing users and
--   messages in the network.
module Types

-- | Represents a user in the social network simulation. Each user is
--   characterized by a unique identifier and a username.
data User
User :: Int -> String -> User

-- | The unique identifier of the user.
[userId] :: User -> Int

-- | The username of the user.
[username] :: User -> String

-- | Represents a message in the social network simulation. A message
--   consists of a sender, a receiver, and the message content.
data Message
Message :: User -> User -> String -> Message

-- | The user who sends the message.
[sender] :: Message -> User

-- | The user who receives the message.
[receiver] :: Message -> User

-- | The content of the message.
[content] :: Message -> String
instance GHC.Show.Show Types.User
instance GHC.Classes.Eq Types.User
instance GHC.Show.Show Types.Message
instance GHC.Classes.Eq Types.Message


-- | Module for handling messages in the Haskell-Based Social Network
--   Simulation. This module defines the Message data type and provides
--   functionalities for creating and managing messages.
module Message

-- | Represents a message in the social network simulation. A message
--   consists of a sender, a receiver, and the message content.
data Message
Message :: User -> User -> String -> Message

-- | The user who sends the message.
[sender] :: Message -> User

-- | The user who receives the message.
[receiver] :: Message -> User

-- | The content of the message.
[content] :: Message -> String

-- | Creates a new message with specified sender, receiver, and content.
--   
--   <tt>param from The sender of the message. </tt>param to The receiver
--   of the message. <tt>param msgContent The content of the message.
--   </tt>return The constructed Message.
createMessage :: User -> User -> String -> Message

-- | Generates a random message content from a predefined list of phrases.
--   
--   @return A randomly selected message content.
randomMessageContent :: IO String

-- | Creates a random message between two users.
--   
--   This function selects a random content and constructs a message from
--   one user to another.
--   
--   <tt>param from The sender of the message. </tt>param to The receiver
--   of the message. @return A randomly generated Message in IO context.
createRandomMessage :: User -> User -> IO Message


-- | This module handles the interaction history of the Haskell-Based
--   Social Network Simulation. It includes functionalities to connect to a
--   SQLite database, log interactions, and query the interaction history.
module InteractionHistory

-- | Connects to the SQLite database used for storing interaction history.
connectDb :: IO Connection

-- | Initializes the database by creating a table for messages if it does
--   not exist.
initDb :: Connection -> IO ()

-- | Logs a new interaction (message) in the database.
--   
--   <tt>param conn The database connection. </tt>param message The message
--   to log.
logInteraction :: Connection -> Message -> IO ()

-- | Queries the interaction history of a specific user.
--   
--   <tt>param conn The database connection. </tt>param senderUserId The
--   user ID of the sender. <tt>param receiverUserId The user ID of the
--   receiver. </tt>return A list of messages related to the specified
--   user.
queryUserHistory :: Connection -> Int -> Int -> IO [Message]

-- | Queries the entire interaction history.
--   
--   <tt>param conn The database connection. </tt>return A list of all
--   messages in the interaction history.
queryFullHistory :: Connection -> IO [Message]


-- | Module for handling user-related functionalities in the Haskell-Based
--   Social Network Simulation. This module provides functionalities for
--   creating and managing users, including generating random users for the
--   simulation.
module User

-- | Creates a new user with a specified ID and username.
--   
--   <tt>param id The unique identifier for the new user. </tt>param name
--   The name for the new user. @return A new User object.
createUser :: Int -> String -> User

-- | Generates a random username from a predefined list of names.
--   
--   @return A randomly selected username.
randomUsername :: IO String

-- | Creates a random user with a unique ID and a randomly generated
--   username.
--   
--   @return A randomly generated User in IO context.
createRandomUser :: IO User

-- | Retrieves the username of a given User.
--   
--   <tt>param user The User object. </tt>return The username of the User.
getUsername :: User -> String
